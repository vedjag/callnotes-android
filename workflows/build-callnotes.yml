name: Build CallNotes APK (no source in repo)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (empty repo OK)
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install SDK components & accept licenses
        run: |
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"
          yes | sdkmanager --licenses

      - name: Create Android project files
        run: |
          set -e
          mkdir -p callnotes/app/src/main/java/com/example/callnotes/{data,util,telephony,notify}
          mkdir -p callnotes/app/src/main/res/{layout,values,drawable,mipmap-anydpi-v26}

          # settings.gradle (plugin versions here)
          cat > callnotes/settings.gradle <<'EOF'
          pluginManagement {
              repositories {
                  google()
                  mavenCentral()
                  gradlePluginPortal()
              }
              plugins {
                  id("com.android.application") version "8.5.1"
                  id("org.jetbrains.kotlin.android") version "1.9.24"
                  id("org.jetbrains.kotlin.kapt") version "1.9.24"
              }
          }
          rootProject.name = "CallNotes"
          include(":app")
          EOF

          # Root build.gradle
          cat > callnotes/build.gradle <<'EOF'
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          EOF

          # gradle.properties
          cat > callnotes/gradle.properties <<'EOF'
          org.gradle.jvmargs=-Xmx2g -Dfile.encoding=UTF-8
          android.useAndroidX=true
          android.enableJetifier=true
          kotlin.code.style=official
          EOF

          # app/build.gradle
          cat > callnotes/app/build.gradle <<'EOF'
          plugins {
            id("com.android.application")
            id("org.jetbrains.kotlin.android")
            id("org.jetbrains.kotlin.kapt")
          }

          android {
            namespace = "com.example.callnotes"
            compileSdk = 34

            defaultConfig {
              applicationId = "com.example.callnotes"
              minSdk = 26
              targetSdk = 34
              versionCode = 1
              versionName = "1.0.0"
            }

            buildFeatures { viewBinding = true }

            compileOptions {
              sourceCompatibility = JavaVersion.VERSION_17
              targetCompatibility = JavaVersion.VERSION_17
            }
            kotlinOptions { jvmTarget = "17" }
          }

          dependencies {
            implementation("androidx.core:core-ktx:1.13.1")
            implementation("androidx.appcompat:appcompat:1.7.0")
            implementation("com.google.android.material:material:1.12.0")
            implementation("androidx.activity:activity-ktx:1.9.2")
            implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.8.4")

            implementation("androidx.room:room-runtime:2.6.1")
            implementation("androidx.room:room-ktx:2.6.1")
            kapt("androidx.room:room-compiler:2.6.1")

            implementation("androidx.work:work-runtime-ktx:2.9.0")
          }
          EOF

          # AndroidManifest.xml (uses Material3 theme directly)
          cat > callnotes/app/src/main/AndroidManifest.xml <<'EOF'
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
              <uses-permission android:name="android.permission.READ_PHONE_STATE" />
              <uses-permission android:name="android.permission.READ_CONTACTS" />
              <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />
              <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
              <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
              <uses-permission android:name="android.permission.FOREGROUND_SERVICE_PHONE_CALL" />
              <uses-permission android:name="android.permission.PROCESS_OUTGOING_CALLS" />

              <application
                  android:allowBackup="true"
                  android:label="CallNotes"
                  android:theme="@style/Theme.Material3.DayNight.NoActionBar">

                  <activity
                      android:name=".MainActivity"
                      android:exported="true">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>

                  <service
                      android:name=".telephony.CallScreeningSvc"
                      android:exported="true"
                      android:permission="android.permission.BIND_SCREENING_SERVICE">
                      <intent-filter>
                          <action android:name="android.telecom.CallScreeningService" />
                      </intent-filter>
                  </service>

                  <service
                      android:name=".telephony.OverlayService"
                      android:exported="false"
                      android:foregroundServiceType="phoneCall" />

                  <receiver
                      android:name=".notify.NotificationActionReceiver"
                      android:exported="false" />

                  <receiver
                      android:name=".telephony.LegacyOutgoingReceiver"
                      android:exported="true">
                      <intent-filter android:priority="999">
                          <action android:name="android.intent.action.NEW_OUTGOING_CALL" />
                      </intent-filter>
                  </receiver>

              </application>
          </manifest>
          EOF

          # --- Kotlin sources ---

          # MainActivity
          cat > callnotes/app/src/main/java/com/example/callnotes/MainActivity.kt <<'EOF'
          package com.example.callnotes

          import android.os.Bundle
          import android.widget.Toast
          import androidx.activity.result.contract.ActivityResultContracts
          import androidx.appcompat.app.AppCompatActivity
          import com.example.callnotes.util.Permissions

          class MainActivity : AppCompatActivity() {
              private val permLauncher = registerForActivityResult(ActivityResultContracts.RequestMultiplePermissions()) { }

              private val overlayLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { }

              override fun onCreate(savedInstanceState: Bundle?) {
                  super.onCreate(savedInstanceState)
                  setContentView(R.layout.activity_main)

                  permLauncher.launch(Permissions.RUNTIME)
                  Permissions.ensureOverlayPermission(this, overlayLauncher)

                  val roleMgr = getSystemService(android.app.role.RoleManager::class.java)
                  if (roleMgr != null &&
                      roleMgr.isRoleAvailable(android.app.role.RoleManager.ROLE_CALL_SCREENING) &&
                      !roleMgr.isRoleHeld(android.app.role.RoleManager.ROLE_CALL_SCREENING)) {
                      val i = roleMgr.createRequestRoleIntent(android.app.role.RoleManager.ROLE_CALL_SCREENING)
                      startActivity(i)
                      Toast.makeText(this, "Please grant Call Screening to enable incoming popups", Toast.LENGTH_LONG).show()
                  }
              }
          }
          EOF

          # data/AppDatabase.kt
          cat > callnotes/app/src/main/java/com/example/callnotes/data/AppDatabase.kt <<'EOF'
          package com.example.callnotes.data

          import android.content.Context
          import androidx.room.Database
          import androidx.room.Room
          import androidx.room.RoomDatabase

          @Database(entities = [CallNote::class], version = 1)
          abstract class AppDatabase : RoomDatabase() {
              abstract fun dao(): CallNoteDao

              companion object {
                  @Volatile private var INSTANCE: AppDatabase? = null
                  fun get(ctx: Context) = INSTANCE ?: synchronized(this) {
                      INSTANCE ?: Room.databaseBuilder(ctx, AppDatabase::class.java, "callnotes.db")
                          .build().also { INSTANCE = it }
                  }
              }
          }
          EOF

          # data/CallNote.kt
          cat > callnotes/app/src/main/java/com/example/callnotes/data/CallNote.kt <<'EOF'
          package com.example.callnotes.data

          import androidx.room.Entity
          import androidx.room.PrimaryKey
          import androidx.room.Index

          @Entity(
              tableName = "call_notes",
              indices = [Index(value = ["normalizedNumber"], unique = true)]
          )
          data class CallNote(
              @PrimaryKey(autoGenerate = true) val id: Long = 0,
              val rawNumber: String,
              val normalizedNumber: String,
              val company: String?,
              val subject: String?,
              val role: String?,
              val salary: String?,
              val noticePeriod: String?,
              val description: String?,
              val followUpNeeded: Boolean,
              val followUpAtMillis: Long?,
              val createdAt: Long = System.currentTimeMillis(),
              val updatedAt: Long = System.currentTimeMillis()
          )
          EOF

          # data/CallNoteDao.kt
          cat > callnotes/app/src/main/java/com/example/callnotes/data/CallNoteDao.kt <<'EOF'
          package com.example.callnotes.data

          import androidx.room.*

          @Dao
          interface CallNoteDao {
              @Query("SELECT * FROM call_notes WHERE normalizedNumber = :n LIMIT 1")
              suspend fun getByNumber(n: String): CallNote?

              @Insert(onConflict = OnConflictStrategy.REPLACE)
              suspend fun upsert(note: CallNote): Long
          }
          EOF

          # util/PhoneNormalizer.kt
          cat > callnotes/app/src/main/java/com/example/callnotes/util/PhoneNormalizer.kt <<'EOF'
          package com.example.callnotes.util

          object PhoneNormalizer {
              fun normalize(raw: String?): String {
                  val d = raw?.filter { it.isDigit() } ?: ""
                  return if (d.length > 10) d.takeLast(10) else d
              }
          }
          EOF

          # util/Contacts.kt
          cat > callnotes/app/src/main/java/com/example/callnotes/util/Contacts.kt <<'EOF'
          package com.example.callnotes.util

          import android.content.Context
          import android.net.Uri
          import android.provider.ContactsContract

          object ContactsUtil {
              fun isUnknownNumber(context: Context, number: String): Boolean {
                  if (number.isBlank()) return true
                  val uri = Uri.withAppendedPath(ContactsContract.PhoneLookup.CONTENT_FILTER_URI, Uri.encode(number))
                  context.contentResolver.query(
                      uri,
                      arrayOf(ContactsContract.PhoneLookup._ID),
                      null,
                      null,
                      null
                  ).use { c ->
                      return !(c != null && c.moveToFirst())
                  }
              }
          }
          EOF

          # util/Permissions.kt
          cat > callnotes/app/src/main/java/com/example/callnotes/util/Permissions.kt <<'EOF'
          package com.example.callnotes.util

          import android.Manifest
          import android.content.Context
          import android.content.Intent
          import android.net.Uri
          import android.os.Build
          import android.provider.Settings
          import androidx.activity.result.ActivityResultLauncher

          object Permissions {
              val RUNTIME = buildList {
                  add(Manifest.permission.READ_PHONE_STATE)
                  add(Manifest.permission.READ_CONTACTS)
                  if (Build.VERSION.SDK_INT >= 33) add(Manifest.permission.POST_NOTIFICATIONS)
              }.toTypedArray()

              fun ensureOverlayPermission(ctx: Context, launcher: ActivityResultLauncher<Intent>) {
                  if (!Settings.canDrawOverlays(ctx)) {
                      val i = Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse("package:" + ctx.packageName))
                      launcher.launch(i)
                  }
              }
          }
          EOF

          # telephony/CallScreeningSvc.kt
          cat > callnotes/app/src/main/java/com/example/callnotes/telephony/CallScreeningSvc.kt <<'EOF'
          package com.example.callnotes.telephony

          import android.telecom.Call
          import android.telecom.CallScreeningService
          import com.example.callnotes.data.AppDatabase
          import com.example.callnotes.util.PhoneNormalizer
          import com.example.callnotes.util.ContactsUtil
          import kotlinx.coroutines.CoroutineScope
          import kotlinx.coroutines.Dispatchers
          import kotlinx.coroutines.laun
