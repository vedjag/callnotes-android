name: Build CallNotes APK (no source in repo)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (empty repo OK)
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install SDK components & accept licenses
        run: |
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"
          yes | sdkmanager --licenses
      - name: Create Android project files
        run: |
          set -e
          mkdir -p callnotes/app/src/main/java/com/example/callnotes/{data,util,telephony,notify}
          mkdir -p callnotes/app/src/main/res/{layout,values,drawable,mipmap-anydpi-v26}

          # settings.gradle (plugin versions here)
          cat > callnotes/settings.gradle <<'EOF'
          pluginManagement {
              repositories {
                  google()
                  mavenCentral()
                  gradlePluginPortal()
              }
              plugins {
                  id("com.android.application") version "8.5.1"
                  id("org.jetbrains.kotlin.android") version "1.9.24"
                  id("org.jetbrains.kotlin.kapt") version "1.9.24"
              }
          }
          rootProject.name = "CallNotes"
          include(":app")
          EOF

          # Root build.gradle
          cat > callnotes/build.gradle <<'EOF'
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          EOF

          # gradle.properties
          cat > callnotes/gradle.properties <<'EOF'
          org.gradle.jvmargs=-Xmx2g -Dfile.encoding=UTF-8
          android.useAndroidX=true
          android.enableJetifier=true
          kotlin.code.style=official
          EOF

          # app/build.gradle
          cat > callnotes/app/build.gradle <<'EOF'
          plugins {
            id("com.android.application")
            id("org.jetbrains.kotlin.android")
            id("org.jetbrains.kotlin.kapt")
          }

          android {
            namespace = "com.example.callnotes"
            compileSdk = 34

            defaultConfig {
              applicationId = "com.example.callnotes"
              minSdk = 26
              targetSdk = 34
              versionCode = 1
              versionName = "1.0.0"
            }

            buildFeatures { viewBinding = true }

            compileOptions {
              sourceCompatibility = JavaVersion.VERSION_17
              targetCompatibility = JavaVersion.VERSION_17
            }
            kotlinOptions { jvmTarget = "17" }
          }

          dependencies {
            implementation("androidx.core:core-ktx:1.13.1")
            implementation("androidx.appcompat:appcompat:1.7.0")
            implementation("com.google.android.material:material:1.12.0")
            implementation("androidx.activity:activity-ktx:1.9.2")
            implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.8.4")

            implementation("androidx.room:room-runtime:2.6.1")
            implementation("androidx.room:room-ktx:2.6.1")
            kapt("androidx.room:room-compiler:2.6.1")

            implementation("androidx.work:work-runtime-ktx:2.9.0")
          }
          EOF

          # AndroidManifest.xml (uses Material3 theme directly)
          cat > callnotes/app/src/main/AndroidManifest.xml <<'EOF'
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
              <uses-permission android:name="android.permission.READ_PHONE_STATE" />
              <uses-permission android:name="android.permission.READ_CONTACTS" />
              <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />
              <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
              <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
              <uses-permission android:name="android.permission.FOREGROUND_SERVICE_PHONE_CALL" />
              <uses-permission android:name="android.permission.PROCESS_OUTGOING_CALLS" />

              <application
                  android:allowBackup="true"
                  android:label="CallNotes"
                  android:theme="@style/Theme.Material3.DayNight.NoActionBar">

                  <activity
                      android:name=".MainActivity"
                      android:exported="true">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>

                  <service
                      android:name=".telephony.CallScreeningSvc"
                      android:exported="true"
                      android:permission="android.permission.BIND_SCREENING_SERVICE">
                      <intent-filter>
                          <action android:name="android.telecom.CallScreeningService" />
                      </intent-filter>
                  </service>

                  <service
                      android:name=".telephony.OverlayService"
                      android:exported="false"
                      android:foregroundServiceType="phoneCall" />

                  <receiver
                      android:name=".notify.NotificationActionReceiver"
                      android:exported="false" />

                  <receiver
                      android:name=".telephony.LegacyOutgoingReceiver"
                      android:exported="true">
                      <intent-filter android:priority="999">
                          <action android:name="android.intent.action.NEW_OUTGOING_CALL" />
                      </intent-filter>
                  </receiver>

              </application>
          </manifest>
          EOF

          # --- Kotlin sources ---

          # MainActivity
          cat > callnotes/app/src/main/java/com/example/callnotes/MainActivity.kt <<'EOF'
          package com.example.callnotes

          import android.os.Bundle
          import android.widget.Toast
          import androidx.activity.result.contract.ActivityResultContracts
          import androidx.appcompat.app.AppCompatActivity
          import com.example.callnotes.util.Permissions

          class MainActivity : AppCompatActivity() {
              private val permLauncher = registerForActivityResult(ActivityResultContracts.RequestMultiplePermissions()) { }

              private val overlayLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { }

              override fun onCreate(savedInstanceState: Bundle?) {
                  super.onCreate(savedInstanceState)
                  setContentView(R.layout.activity_main)

                  permLauncher.launch(Permissions.RUNTIME)
                  Permissions.ensureOverlayPermission(this, overlayLauncher)

                  val roleMgr = getSystemService(android.app.role.RoleManager::class.java)
                  if (roleMgr != null &&
                      roleMgr.isRoleAvailable(android.app.role.RoleManager.ROLE_CALL_SCREENING) &&
                      !roleMgr.isRoleHeld(android.app.role.RoleManager.ROLE_CALL_SCREENING)) {
                      val i = roleMgr.createRequestRoleIntent(android.app.role.RoleManager.ROLE_CALL_SCREENING)
                      startActivity(i)
                      Toast.makeText(this, "Please grant Call Screening to enable incoming popups", Toast.LENGTH_LONG).show()
                  }
              }
          }
          EOF

          # data/AppDatabase.kt
          cat > callnotes/app/src/main/java/com/example/callnotes/data/AppDatabase.kt <<'EOF'
          package com.example.callnotes.data

          import android.content.Context
          import androidx.room.Database
          import androidx.room.Room
          import androidx.room.RoomDatabase

          @Database(entities = [CallNote::class], version = 1)
          abstract class AppDatabase : RoomDatabase() {
              abstract fun dao(): CallNoteDao

              companion object {
                  @Volatile private var INSTANCE: AppDatabase? = null
                  fun get(ctx: Context) = INSTANCE ?: synchronized(this) {
                      INSTANCE ?: Room.databaseBuilder(ctx, AppDatabase::class.java, "callnotes.db")
                          .build().also { INSTANCE = it }
                  }
              }
          }
          EOF

          # data/CallNote.kt
          cat > callnotes/app/src/main/java/com/example/callnotes/data/CallNote.kt <<'EOF'
          package com.example.callnotes.data

          import androidx.room.Entity
          import androidx.room.PrimaryKey
          import androidx.room.Index

          @Entity(
              tableName = "call_notes",
              indices = [Index(value = ["normalizedNumber"], unique = true)]
          )
          data class CallNote(
              @PrimaryKey(autoGenerate = true) val id: Long = 0,
              val rawNumber: String,
              val normalizedNumber: String,
              val company: String?,
              val subject: String?,
              val role: String?,
              val salary: String?,
              val noticePeriod: String?,
              val description: String?,
              val followUpNeeded: Boolean,
              val followUpAtMillis: Long?,
              val createdAt: Long = System.currentTimeMillis(),
              val updatedAt: Long = System.currentTimeMillis()
          )
          EOF

          # data/CallNoteDao.kt
          cat > callnotes/app/src/main/java/com/example/callnotes/data/CallNoteDao.kt <<'EOF'
          package com.example.callnotes.data

          import androidx.room.*

          @Dao
          interface CallNoteDao {
              @Query("SELECT * FROM call_notes WHERE normalizedNumber = :n LIMIT 1")
              suspend fun getByNumber(n: String): CallNote?

              @Insert(onConflict = OnConflictStrategy.REPLACE)
              suspend fun upsert(note: CallNote): Long
          }
          EOF

          # util/PhoneNormalizer.kt
          cat > callnotes/app/src/main/java/com/example/callnotes/util/PhoneNormalizer.kt <<'EOF'
          package com.example.callnotes.util

          object PhoneNormalizer {
              fun normalize(raw: String?): String {
                  val d = raw?.filter { it.isDigit() } ?: ""
                  return if (d.length > 10) d.takeLast(10) else d
              }
          }
          EOF

          # util/Contacts.kt
          cat > callnotes/app/src/main/java/com/example/callnotes/util/Contacts.kt <<'EOF'
          package com.example.callnotes.util

          import android.content.Context
          import android.net.Uri
          import android.provider.ContactsContract

          object ContactsUtil {
              fun isUnknownNumber(context: Context, number: String): Boolean {
                  if (number.isBlank()) return true
                  val uri = Uri.withAppendedPath(ContactsContract.PhoneLookup.CONTENT_FILTER_URI, Uri.encode(number))
                  context.contentResolver.query(
                      uri,
                      arrayOf(ContactsContract.PhoneLookup._ID),
                      null,
                      null,
                      null
                  ).use { c ->
                      return !(c != null && c.moveToFirst())
                  }
              }
          }
          EOF

          # util/Permissions.kt
          cat > callnotes/app/src/main/java/com/example/callnotes/util/Permissions.kt <<'EOF'
          package com.example.callnotes.util

          import android.Manifest
          import android.content.Context
          import android.content.Intent
          import android.net.Uri
          import android.os.Build
          import android.provider.Settings
          import androidx.activity.result.ActivityResultLauncher

          object Permissions {
              val RUNTIME = buildList {
                  add(Manifest.permission.READ_PHONE_STATE)
                  add(Manifest.permission.READ_CONTACTS)
                  if (Build.VERSION.SDK_INT >= 33) add(Manifest.permission.POST_NOTIFICATIONS)
              }.toTypedArray()

              fun ensureOverlayPermission(ctx: Context, launcher: ActivityResultLauncher<Intent>) {
                  if (!Settings.canDrawOverlays(ctx)) {
                      val i = Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse("package:" + ctx.packageName))
                      launcher.launch(i)
                  }
              }
          }
          EOF

          # telephony/CallScreeningSvc.kt
          cat > callnotes/app/src/main/java/com/example/callnotes/telephony/CallScreeningSvc.kt <<'EOF'
          package com.example.callnotes.telephony

          import android.telecom.Call
          import android.telecom.CallScreeningService
          import com.example.callnotes.data.AppDatabase
          import com.example.callnotes.util.PhoneNormalizer
          import com.example.callnotes.util.ContactsUtil
          import kotlinx.coroutines.CoroutineScope
          import kotlinx.coroutines.Dispatchers
          import kotlinx.coroutines.launch

          class CallScreeningSvc : CallScreeningService() {
              private val scope = CoroutineScope(Dispatchers.IO)

              override fun onScreenCall(callDetails: Call.Details) {
                  val handle = callDetails.handle
                  val number = handle?.schemeSpecificPart ?: return
                  val n = PhoneNormalizer.normalize(number)
                  val ctx = this

                  scope.launch {
                      val dao = AppDatabase.get(ctx).dao()
                      val existing = dao.getByNumber(n)
                      val isUnknown = ContactsUtil.isUnknownNumber(ctx, n)
                      val incoming = callDetails.callDirection == Call.Details.DIRECTION_INCOMING
                      if ((incoming && isUnknown) || existing != null) {
                          OverlayService.showPrompt(ctx, number, existing != null)
                      }
                  }
                  respondToCall(callDetails, CallResponse.Builder().build())
              }
          }
          EOF

          # telephony/OverlayService.kt
          cat > callnotes/app/src/main/java/com/example/callnotes/telephony/OverlayService.kt <<'EOF'
          package com.example.callnotes.telephony

          import android.app.DatePickerDialog
          import android.app.Notification
          import android.app.NotificationChannel
          import android.app.NotificationManager
          import android.app.PendingIntent
          import android.app.Service
          import android.content.Context
          import android.content.Intent
          import android.graphics.PixelFormat
          import android.os.Build
          import android.os.IBinder
          import android.view.Gravity
          import android.view.LayoutInflater
          import android.view.View
          import android.view.WindowManager
          import android.widget.*
          import androidx.core.app.NotificationCompat
          import com.example.callnotes.R
          import com.example.callnotes.data.AppDatabase
          import com.example.callnotes.data.CallNote
          import com.example.callnotes.notify.NotificationActionReceiver
          import com.example.callnotes.util.PhoneNormalizer
          import kotlinx.coroutines.CoroutineScope
          import kotlinx.coroutines.Dispatchers
          import kotlinx.coroutines.launch
          import java.util.Calendar

          class OverlayService : Service() {
              private lateinit var wm: WindowManager
              private var viewPrompt: View? = null
              private var viewForm: View? = null
              private var selectedWhenMillis: Long? = null
              private val scope = CoroutineScope(Dispatchers.IO)

              override fun onCreate() {
                  super.onCreate()
                  wm = getSystemService(Context.WINDOW_SERVICE) as WindowManager
                  createChannel()
                  startForeground(42, buildNotification("Ready", null))
              }

              override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
                  val number = intent?.getStringExtra(EXTRA_NUMBER) ?: return START_NOT_STICKY
                  val hasExisting = intent.getBooleanExtra(EXTRA_HAS_EXISTING, false)
                  showPrompt(number, hasExisting)
                  return START_NOT_STICKY
              }

              override fun onDestroy() {
                  removeViews()
                  super.onDestroy()
              }

              override fun onBind(intent: Intent?): IBinder? = null

              private fun windowParams(): WindowManager.LayoutParams =
                  WindowManager.LayoutParams(
                      WindowManager.LayoutParams.WRAP_CONTENT,
                      WindowManager.LayoutParams.WRAP_CONTENT,
                      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)
                          WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY
                      else
                          WindowManager.LayoutParams.TYPE_PHONE,
                      WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or
                              WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN or
                              WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS,
                      PixelFormat.TRANSLUCENT
                  ).apply { gravity = Gravity.TOP or Gravity.END; x = 16; y = 150 }

              private fun showPrompt(number: String, hasExisting: Boolean) {
                  removeViews()
                  val inflater = LayoutInflater.from(this)
                  viewPrompt = inflater.inflate(R.layout.overlay_prompt, null)
                  val root = viewPrompt!!
                  root.findViewById<TextView>(R.id.tvNumber).text = number
                  val btnYes = root.findViewById<Button>(R.id.btnYes)
                  val btnNo = root.findViewById<Button>(R.id.btnNo)
                  val btnOpen = root.findViewById<Button>(R.id.btnOpen)
                  btnOpen.visibility = if (hasExisting) View.VISIBLE else View.GONE
                  btnOpen.setOnClickListener { showForm(number) }
                  btnYes.setOnClickListener { showForm(number) }
                  btnNo.setOnClickListener { stopSelf() }
                  wm.addView(root, windowParams())
                  (getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager)
                      .notify(42, buildNotification("Tap to open form", number))
              }

              private fun showForm(number: String) {
                  val inflater = LayoutInflater.from(this)
                  viewForm = inflater.inflate(R.layout.overlay_form, null)
                  val root = viewForm!!
                  val etCompany = root.findViewById<EditText>(R.id.etCompany)
                  val etSubject = root.findViewById<EditText>(R.id.etSubject)
                  val etRole = root.findViewById<EditText>(R.id.etRole)
                  val etSalary = root.findViewById<EditText>(R.id.etSalary)
                  val etNotice = root.findViewById<EditText>(R.id.etNotice)
                  val etDesc = root.findViewById<EditText>(R.id.etDescription)
                  val swFollow = root.findViewById<Switch>(R.id.swFollow)
                  val btnPickWhen = root.findViewById<Button>(R.id.btnPickWhen)
                  val tvWhen = root.findViewById<TextView>(R.id.tvWhenValue)
                  val btnSave = root.findViewById<Button>(R.id.btnSave)
                  val btnCancel = root.findViewById<Button>(R.id.btnCancel)

                  btnPickWhen.setOnClickListener {
                      pickDateTime { millis ->
                          selectedWhenMillis = millis
                          tvWhen.text = if (millis != null) java.text.DateFormat.getDateTimeInstance().format(java.util.Date(millis)) else getString(R.string.not_set)
                      }
                  }

                  btnCancel.setOnClickListener { removeViews(); stopSelf() }
                  btnSave.setOnClickListener {
                      scope.launch {
                          val n = PhoneNormalizer.normalize(number)
                          val whenMillis = if (swFollow.isChecked) selectedWhenMillis else null
                          val note = CallNote(
                              rawNumber = number,
                              normalizedNumber = n,
                              company = etCompany.text.toString().ifBlank { null },
                              subject = etSubject.text.toString().ifBlank { null },
                              role = etRole.text.toString().ifBlank { null },
                              salary = etSalary.text.toString().ifBlank { null },
                              noticePeriod = etNotice.text.toString().ifBlank { null },
                              description = etDesc.text.toString().ifBlank { null },
                              followUpNeeded = swFollow.isChecked,
                              followUpAtMillis = whenMillis
                          )
                          AppDatabase.get(this@OverlayService).dao().upsert(note)
                          if (note.followUpNeeded && whenMillis != null && whenMillis > System.currentTimeMillis()) {
                              com.example.callnotes.notify.FollowUpWorker.scheduleFollowUp(
                                  this@OverlayService,
                                  n,
                                  note.company ?: note.rawNumber,
                                  whenMillis
                              )
                          }
                          stopSelf()
                      }
                  }

                  viewPrompt?.let { wm.removeView(it) }
                  viewPrompt = null
                  wm.addView(root, windowParams())
              }

              private fun removeViews() {
                  runCatching { viewPrompt?.let { wm.removeView(it) } }
                  runCatching { viewForm?.let { wm.removeView(it) } }
                  viewPrompt = null
                  viewForm = null
              }

              private fun createChannel() {
                  val nm = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
                  val id = CHANNEL_ID
                  if (Build.VERSION.SDK_INT >= 26 && nm.getNotificationChannel(id) == null) {
                      nm.createNotificationChannel(NotificationChannel(id, "CallNotes", NotificationManager.IMPORTANCE_LOW))
                  }
              }

              private fun buildNotification(text: String, number: String?): Notification {
                  val nmPending = PendingIntent.getBroadcast(
                      this, 100,
                      NotificationActionReceiver.intentOpen(this, number ?: ""),
                      PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
                  )
                  val dismissPending = PendingIntent.getBroadcast(
                      this, 101,
                      NotificationActionReceiver.intentDismiss(this),
                      PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
                  )
                  return NotificationCompat.Builder(this, CHANNEL_ID)
                      .setSmallIcon(R.mipmap.ic_launcher)
                      .setContentTitle("Call note")
                      .setContentText(text)
                      .addAction(0, getString(R.string.open), nmPending)
                      .addAction(0, getString(R.string.dismiss), dismissPending)
                      .setOngoing(true)
                      .build()
              }

              companion object {
                  private const val CHANNEL_ID = "callnotes"
                  private const val EXTRA_NUMBER = "extra_number"
                  private const val EXTRA_HAS_EXISTING = "extra_has"
                  fun showPrompt(ctx: Context, number: String, hasExisting: Boolean) {
                      val i = Intent(ctx, OverlayService::class.java)
                      i.putExtra(EXTRA_NUMBER, number)
                      i.putExtra(EXTRA_HAS_EXISTING, hasExisting)
                      ctx.startForegroundService(i)
                  }
              }

              private fun pickDateTime(onPicked: (Long?) -> Unit) {
                  val now = Calendar.getInstance()
                  val d = DatePickerDialog(
                      this,
                      { _, y, m, day ->
                          val t = android.app.TimePickerDialog(
                              this,
                              { _, h, min ->
                                  val cal = Calendar.getInstance().apply { set(y, m, day, h, min, 0); set(Calendar.MILLISECOND, 0) }
                                  onPicked(cal.timeInMillis)
                              }, now.get(Calendar.HOUR_OF_DAY), now.get(Calendar.MINUTE), true
                          )
                          t.window?.setType(android.view.WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY)
                          t.show()
                      }, now.get(Calendar.YEAR), now.get(Calendar.MONTH), now.get(Calendar.DAY_OF_MONTH)
                  )
                  d.datePicker.minDate = System.currentTimeMillis() - 1000
                  d.window?.setType(android.view.WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY)
                  d.show()
              }
          }
          EOF

          # telephony/LegacyOutgoingReceiver.kt
          cat > callnotes/app/src/main/java/com/example/callnotes/telephony/LegacyOutgoingReceiver.kt <<'EOF'
          package com.example.callnotes.telephony

          import android.content.BroadcastReceiver
          import android.content.Context
          import android.content.Intent

          class LegacyOutgoingReceiver : BroadcastReceiver() {
              override fun onReceive(context: Context, intent: Intent) {
                  val number = intent.extras?.getString(Intent.EXTRA_PHONE_NUMBER) ?: return
                  OverlayService.showPrompt(context, number, hasExisting = true)
              }
          }
          EOF

          # notify/NotificationActionReceiver.kt
          cat > callnotes/app/src/main/java/com/example/callnotes/notify/NotificationActionReceiver.kt <<'EOF'
          package com.example.callnotes.notify

          import android.content.BroadcastReceiver
          import android.content.Context
          import android.content.Intent
          import com.example.callnotes.telephony.OverlayService

          class NotificationActionReceiver : BroadcastReceiver() {
              override fun onReceive(context: Context, intent: Intent) {
                  when (intent.action) {
                      ACTION_OPEN -> {
                          val number = intent.getStringExtra(EXTRA_NUMBER) ?: ""
                          OverlayService.showPrompt(context, number, hasExisting = true)
                      }
                      ACTION_DISMISS -> { /* no-op */ }
                  }
              }
              companion object {
                  const val ACTION_OPEN = "com.example.callnotes.OPEN"
                  const val ACTION_DISMISS = "com.example.callnotes.DISMISS"
                  private const val EXTRA_NUMBER = "n"
                  fun intentOpen(ctx: Context, number: String) =
                      Intent(ctx, NotificationActionReceiver::class.java).apply {
                          action = ACTION_OPEN
                          putExtra(EXTRA_NUMBER, number)
                      }
                  fun intentDismiss(ctx: Context) =
                      Intent(ctx, NotificationActionReceiver::class.java).apply { action = ACTION_DISMISS }
              }
          }
          EOF

          # notify/FollowUpWorker.kt
          cat > callnotes/app/src/main/java/com/example/callnotes/notify/FollowUpWorker.kt <<'EOF'
          package com.example.callnotes.notify

          import android.content.Context
          import androidx.work.Worker
          import androidx.work.WorkerParameters
          import androidx.work.OneTimeWorkRequestBuilder
          import androidx.work.Data
          import androidx.work.ExistingWorkPolicy
          import androidx.work.WorkManager
          import android.app.NotificationManager
          import androidx.core.app.NotificationCompat
          import com.example.callnotes.R

          class FollowUpWorker(ctx: Context, params: WorkerParameters) : Worker(ctx, params) {
              override fun doWork(): Result {
                  val number = inputData.getString(KEY_NUMBER) ?: return Result.success()
                  val title = "Follow-up reminder"
                  val text = inputData.getString(KEY_LABEL) ?: number
                  val nm = applicationContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
                  val notif = NotificationCompat.Builder(applicationContext, CHANNEL_ID)
                      .setSmallIcon(R.mipmap.ic_launcher)
                      .setContentTitle(title)
                      .setContentText(text)
                      .setAutoCancel(true)
                      .addAction(0, applicationContext.getString(R.string.open),
                          android.app.PendingIntent.getBroadcast(
                              applicationContext, 200,
                              NotificationActionReceiver.intentOpen(applicationContext, number),
                              android.app.PendingIntent.FLAG_UPDATE_CURRENT or android.app.PendingIntent.FLAG_IMMUTABLE
                          )
                      )
                      .build()
                  nm.notify(number.hashCode(), notif)
                  return Result.success()
              }
              companion object {
                  private const val CHANNEL_ID = "callnotes"
                  private const val KEY_NUMBER = "number"
                  private const val KEY_LABEL = "label"
                  fun scheduleFollowUp(ctx: Context, normalizedNumber: String, label: String, whenMillis: Long) {
                      val delay = (whenMillis - System.currentTimeMillis()).coerceAtLeast(0)
                      val data = Data.Builder()
                          .putString(KEY_NUMBER, normalizedNumber)
                          .putString(KEY_LABEL, label)
                          .build()
                      val req = OneTimeWorkRequestBuilder<FollowUpWorker>()
                          .setInitialDelay(delay, java.util.concurrent.TimeUnit.MILLISECONDS)
                          .setInputData(data)
                          .addTag("followup_$normalizedNumber")
                          .build()
                      WorkManager.getInstance(ctx)
                          .enqueueUniqueWork("followup_$normalizedNumber", ExistingWorkPolicy.REPLACE, req)
                  }
              }
          }
          EOF

          # --- Resources ---

          # activity_main.xml
          cat > callnotes/app/src/main/res/layout/activity_main.xml <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:layout_width="match_parent"
              android:layout_height="match_parent"
              android:padding="24dp">
              <TextView
                  android:layout_width="wrap_content"
                  android:layout_height="wrap_content"
                  android:text="CallNotes is running. Grant permissions when prompted, then place a test call."
                  android:textSize="16sp"/>
          </FrameLayout>
          EOF

          # overlay_prompt.xml
          cat > callnotes/app/src/main/res/layout/overlay_prompt.xml <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:orientation="vertical"
              android:padding="12dp"
              android:background="#CC222222"
              android:layout_width="wrap_content"
              android:layout_height="wrap_content">
              <TextView
                  android:id="@+id/tvTitle"
                  android:text="Save call details?"
                  android:textColor="#FFFFFF"
                  android:textStyle="bold"
                  android:textSize="16sp"
                  android:layout_width="wrap_content"
                  android:layout_height="wrap_content"/>
              <TextView
                  android:id="@+id/tvNumber"
                  android:textColor="#FFFFFF"
                  android:layout_marginTop="4dp"
                  android:layout_width="wrap_content"
                  android:layout_height="wrap_content"/>
              <LinearLayout
                  android:orientation="horizontal"
                  android:layout_marginTop="8dp"
                  android:layout_width="wrap_content"
                  android:layout_height="wrap_content">
                  <Button
                      android:id="@+id/btnYes"
                      android:text="Yes"
                      android:layout_width="wrap_content"
                      android:layout_height="wrap_content"/>
                  <Button
                      android:id="@+id/btnOpen"
                      android:text="Open"
                      android:layout_marginStart="8dp"
                      android:layout_width="wrap_content"
                      android:layout_height="wrap_content"/>
                  <Button
                      android:id="@+id/btnNo"
                      android:text="Cancel"
                      android:layout_marginStart="8dp"
                      android:layout_width="wrap_content"
                      android:layout_height="wrap_content"/>
              </LinearLayout>
          </LinearLayout>
          EOF

          # overlay_form.xml
         <?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:background="#CC1E1E1E"
    android:padding="12dp">
    <LinearLayout
        android:orientation="vertical"
        android:layout_width="300dp"
        android:layout_height="wrap_content">

        <EditText android:id="@+id/etCompany" android:hint="Company" android:textColor="#fff" android:textColorHint="#aaa" android:layout_width="match_parent" android:layout_height="wrap_content"/>
        <EditText android:id="@+id/etSubject" android:hint="Subject" android:textColor="#fff" android:textColorHint="#aaa" android:layout_width="match_parent" android:layout_height="wrap_content"/>
        <EditText android:id="@+id/etRole" android:hint="Role" android:textColor="#fff" android:textColorHint="#aaa" android:layout_width="match_parent" android:layout_height="wrap_content"/>
        <EditText android:id="@+id/etSalary" android:hint="Salary" android:inputType="number" android:textColor="#fff" android:textColorHint="#aaa" android:layout_width="match_parent" android:layout_height="wrap_content"/>
        <EditText android:id="@+id/etNotice" android:hint="Notice period" android:textColor="#fff" android:textColorHint="#aaa" android:layout_width="match_parent" android:layout_height="wrap_content"/>
        <EditText android:id="@+id/etDescription" android:hint="Description" android:textColor="#fff" android:textColorHint="#aaa" android:minLines="2" android:layout_width="match_parent" android:layout_height="wrap_content"/>

        <LinearLayout
            android:orientation="horizontal"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp">
            <TextView android:text="Follow-up?" android:textColor="#fff" android:layout_width="0dp" android:layout_weight="1" android:layout_height="wrap_content"/>
            <Switch android:id="@+id/swFollow" android:layout_width="wrap_content" android:layout_height="wrap_content"/>
        </LinearLayout>

        <LinearLayout
            android:orientation="horizontal"
            android:layout_marginTop="6dp"
            android:layout_width="match_parent"
            android:layout_height="wrap_content">
            <TextView
                android:text="Follow-up at"
                android:textColor="#fff"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
            <Space android:layout_width="8dp" android:layout_height="wrap_content"/>
            <Button
                android:id="@+id/btnPickWhen"
                android:text="@string/pick_date_time"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"/>
        </LinearLayout>

        <TextView
            android:id="@+id/tvWhenValue"
            android:text="@string/not_set"
            android:textColor="#ddd"
            android:layout_marginTop="4dp"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"/>

        <LinearLayout
            android:orientation="horizontal"
            android:layout_marginTop="8dp"
            android:layout_width="match_parent"
            android:layout_height="wrap_content">
            <Button android:id="@+id/btnSave" android:text="Save" android:layout_width="0dp" android:layout_weight="1" android:layout_height="wrap_content"/>
            <Button android:id="@+id/btnCancel" android:text="Cancel" android:layout_marginStart="8dp" android:layout_width="0dp" android:layout_weight="1" android:layout_height="wrap_content"/>
        </LinearLayout>
    </LinearLayout>
</ScrollView>

          EOF

          # strings.xml
          cat > callnotes/app/src/main/res/values/strings.xml <<'EOF'
          <resources>
              <string name="app_name">CallNotes</string>
              <string name="open">Open</string>
              <string name="dismiss">Dismiss</string>
              <string name="pick_date_time">Pick date &amp; time</string>
              <string name="not_set">Not set</string>
          </resources>
          EOF

          # Minimal launcher icon (so R.mipmap.ic_launcher resolves)
          cat > callnotes/app/src/main/res/values/colors.xml <<'EOF'
          <resources>
              <color name="ic_launcher_background">#3DDC84</color>
          </resources>
          EOF

          cat > callnotes/app/src/main/res/drawable/ic_launcher_foreground.xml <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <vector xmlns:android="http://schemas.android.com/apk/res/android"
              android:width="108dp" android:height="108dp" android:viewportWidth="108" android:viewportHeight="108">
              <path android:fillColor="#FFFFFF" android:pathData="M18,18h72v72h-72z"/>
          </vector>
          EOF

          cat > callnotes/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
              <background android:drawable="@color/ic_launcher_background"/>
              <foreground android:drawable="@drawable/ic_launcher_foreground"/>
          </adaptive-icon>
          EOF

          # Done creating files
          echo "Created project tree:"
          ls -R callnotes

      - name: Build with Gradle 8.7
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: "8.7"
          arguments: -p callnotes assembleDebug --stacktrace --no-daemon

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: callnotes/app/build/outputs/apk/debug/app-debug.apk
